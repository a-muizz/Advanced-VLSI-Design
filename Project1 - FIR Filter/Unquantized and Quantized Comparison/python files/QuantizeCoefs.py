import numpy as np

def quantize_fir_taps(coeffs, bits=24):
    # Determine the scaling factor (Q7 format: 1 sign bit, 7 fractional bits)
    scale_factor = 2**(bits - 1)
    
    # Quantize coefficients
    quantized = np.round(coeffs * scale_factor).astype(int)
    
    # Ensure values are within valid range (-128 to 127 for 8-bit signed)
    quantized = np.clip(quantized, -scale_factor, scale_factor - 1)
    
    # Convert back to floating-point for error analysis
    dequantized = quantized / scale_factor
    
    # Compute quantization error
    error = dequantized - coeffs
    
    return quantized, dequantized, error

# Example FIR filter coefficients (low-pass Hamming window)
fir_coeffs = np.array([0.0001387043610525,0.0003813723154641,0.0007589227056007, 0.001152201356401,
   0.001285610970094,0.0007040526279517,-0.001178061726892,-0.004945409688059,
   -0.01097903795651, -0.01922681543653, -0.02902088550086, -0.03902569874835,
    -0.0473817370841, -0.05206014874185, -0.05137370455752,  -0.0445199385564,
   -0.03198911876367, -0.01567679899334, 0.001396605842615,  0.01574369792351,
    0.02430377385251,  0.02532747762821,  0.01897289604141, 0.007388632247583,
  -0.005801612406227,  -0.0165100580983, -0.02141247403938, -0.01901192450116,
   -0.01017527432032, 0.002076002304417,  0.01350432341647,  0.02005638381721,
    0.01927675790097,  0.01124547890531,-0.001320928231545,  -0.0138998220379,
   -0.02169727434887, -0.02139267297465, -0.01248406641385, 0.002282356953955,
    0.01763244577001,  0.02747990719319,  0.02711881133576,  0.01516217284639,
  -0.005476893698902,  -0.0279926292613, -0.04347376536318, -0.04359376762775,
   -0.02339068262438,  0.01676154567934,  0.07067971331836,   0.1276395504781,
     0.1750847900648,   0.2020091958197,   0.2020091958197,   0.1750847900648,
     0.1276395504781,  0.07067971331836,  0.01676154567934, -0.02339068262438,
   -0.04359376762775, -0.04347376536318,  -0.0279926292613,-0.005476893698902,
    0.01516217284639,  0.02711881133576,  0.02747990719319,  0.01763244577001,
   0.002282356953955, -0.01248406641385, -0.02139267297465, -0.02169727434887,
    -0.0138998220379,-0.001320928231545,  0.01124547890531,  0.01927675790097,
    0.02005638381721,  0.01350432341647, 0.002076002304417, -0.01017527432032,
   -0.01901192450116, -0.02141247403938,  -0.0165100580983,-0.005801612406227,
   0.007388632247583,  0.01897289604141,  0.02532747762821,  0.02430377385251,
    0.01574369792351, 0.001396605842615, -0.01567679899334, -0.03198911876367,
    -0.0445199385564, -0.05137370455752, -0.05206014874185,  -0.0473817370841,
   -0.03902569874835, -0.02902088550086, -0.01922681543653, -0.01097903795651,
  -0.004945409688059,-0.001178061726892,0.0007040526279517, 0.001285610970094,
   0.001152201356401,0.0007589227056007,0.0003813723154641,0.0001387043610525])

# Quantize FIR coefficients
quantized_coeffs, dequantized_coeffs, quantization_error = quantize_fir_taps(fir_coeffs)

# Print results
print("Original Coefficients:", fir_coeffs)
print("Quantized Coefficients:", quantized_coeffs)
print("Dequantized Coefficients:", dequantized_coeffs)
print("Quantization Error:", quantization_error)

# Save to files
np.savetxt("fir_coeffs.txt", fir_coeffs, delimiter=", ")
np.savetxt("quantized_coeffs.txt", quantized_coeffs, fmt="%d", delimiter=", ")

# Print results
print("Original Coefficients saved to fir_coeffs.txt")
print("Quantized Coefficients saved to quantized_coeffs.txt")